import React from 'react';
import PropTypes from 'prop-types';
import {
  StyleSheet,
  View,
  Text,
  ScrollView,
  StatusBar,
  Image,
  FlatList,
  List
} from 'react-native';
import ButtonWithImage from '../Button/ButtonWithImage';
import CalendarScreen from '../screens/CalendarScreen';
import Moment from 'moment';
import Swipeout from 'react-native-swipeout';
import Card from '../Card/Card';
import testData from '../Resources/CardTestData';
import { Button } from 'react-native-elements';
import Icon from 'react-native-vector-icons';
import Modal from 'react-native-modal';
import GestureRecognizer from 'react-native-swipe-gestures';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 1,
    backgroundColor: 'black'
  },
  inputButtonContainer: {
    height: 200
  },
  addButton: {
    height: 75,
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#3333cc'
  },
  bottomModal: {
    justifyContent: 'flex-end'
  },
  menuStyle: {
    justifyContent: 'space-around',
    height: 75,
    flexDirection: 'row',
    alignItems: 'center'
  }
});
const idCounter = 0;
class FlatListCard extends React.Component {
  static propTypes = {
    route: PropTypes.shape({
      title: PropTypes.string
    }),
    navigator: PropTypes.object,
    currentDate: PropTypes.object
  };

  constructor(props, context) {
    super(props, context);

    this.state = {
      buttonsVisible: false,
      menuVisible: false,
      data: testData
    };
    idCounter = testData.length + 1;
  }
  _onDelete(id) {
    for (let i = 0; i < testData.length; i++) {
      if (testData[i].id == id) {
        testData.splice(i, 1);
      }
    }
    this.setState({
      data: testData
    });
  }
  _addNewItem(name, t) {
    var dt = Date.now();
    idCounter += 1;
    if (name == 'random-user') {
      fetch('https://randomuser.me/api/?inc=gender,name,nat&nat=us')
        .then(response => response.json())
        .then(data => {
          testData.splice(0, 0, {
            id: idCounter,
            image: require('../Resources/profilePic.jpg'),
            title: data.results[0].name.first + ' ' + data.results[0].name.last,
            timeStamp: Moment(dt).format('h:mm:ss'),
            note1: data.results[0].gender,
            note2: data.results[0].nat,
            swiperActive: true
          });
        });
    } else if (name == 'Medicine') {
      testData.splice(0, 0, {
        id: idCounter,
        title: 'Medicine',
        image: require('../Resources/medicine.png'),
        timeStamp: Moment(dt).format('h:mm:ss'),
        note1: 'Autogenerated',
        note2: '3 Pills a day',
        swiperActive: true
      });
    } else if (name == 'Weight') {
      testData.splice(0, 0, {
        id: idCounter,
        title: 'Weight Change',
        image: require('../Resources/scale.png'),
        timeStamp: Moment(dt).format('h:mm:ss'),
        note1: 'Autogenerated',
        note2: 'You gained weight',
        swiperActive: true
      });
    } else if (name == 'Pain') {
      testData.splice(0, 0, {
        id: idCounter,
        title: 'Pain!',
        image: require('../Resources/intensePain.png'),
        timeStamp: Moment(dt).format('h:mm:ss'),
        note1: 'Autogenerated',
        note2: 'You are in pain!',
        swiperActive: true
      });
    } else {
      testData.splice(0, 0, {
        id: idCounter,
        iconName: name,
        title: t,
        timeStamp: Moment(dt).format('h:mm:ss'),
        note1: 'Autogenerated',
        note2: 'Duration: xx min',
        swiperActive: true
      });
    }
    this.setState({
      data: testData,
      buttonsVisible: false,
      menuVisible: false
    });
  }

  render() {
    // Buttons

    return (
      <View style={styles.container}>
        <StatusBar backgroundColor={'blue'} barStyle={'light-content'} />
        <FlatList
          data={this.state.data}
          keyExtractor={item => item.id}
          extraData={this.state}
          renderItem={({ item, index }) => {
            return (
              <Card
                image={item.image}
                title={item.title}
                timeStamp={item.timeStamp}
                note1={item.note1}
                note2={item.note2}
                backgroundColor={item.backgroundColor}
                swiperActive={item.swiperActive}
                buttonActive={item.buttonActive}
                iconName={item.iconName}
                buttonsRight={[
                  {
                    onPress: (item.onPress = () => {
                      this._onDelete(item.id);
                    }),

                    text: 'Delete',
                    type: 'delete'
                  }
                ]}
                buttonsLeft={item.buttonsLeft}
                onCloseSwipeout={this._onClose}
              />
            );
          }}
        />
        <Modal
          onBackdropPress={() => this.setState({ menuVisible: false })}
          style={styles.bottomModal}
          isVisible={this.state.menuVisible}
        >
          <View style={styles.menuStyle}>
            <ButtonWithImage
              imageSource={require('../Resources/medicine.png')}
              backgroundColor={'#00ff00'}
              onPress={() => this._addNewItem('Medicine', 'Medicine')}
              height={50}
              width={50}
            />
            <ButtonWithImage
              imageSource={require('../Resources/intensePain.png')}
              backgroundColor={'#00ff00'}
              onPress={() => this._addNewItem('Pain', 'Pain')}
              height={50}
              width={50}
            />
            <ButtonWithImage
              imageSource={require('../Resources/scale.png')}
              backgroundColor={'#00ff00'}
              onPress={() => this._addNewItem('Weight', 'Weight')}
              height={50}
              width={50}
            />
          </View>
        </Modal>
        <Modal
          onBackdropPress={() => this.setState({ buttonsVisible: false })}
          style={styles.bottomModal}
          isVisible={this.state.buttonsVisible}
        >
          <View style={{ height: 150 }}>
            <ScrollView style={styles.inputButtonContainer} horizontal={true}>
              <ButtonWithImage
                text={'Headache'}
                onPress={() => this._addNewItem('headache', 'Headache')}
                imageSource={require('../Resources/headPain.png')}
                backgroundColor={'#7c0920'}
                color={'#ffffff'}
              />
              <ButtonWithImage
                text={'Neck Pain'}
                onPress={() => this._addNewItem('neck-pain', 'Neck Pain')}
                imageSource={require('../Resources/neckPain.png')}
                backgroundColor={'#b43649'}
                color={'#ffffff'}
              />
              <ButtonWithImage
                text={'Leg Pain'}
                onPress={
                  (onPress = () => {
                    this._addNewItem('leg-pain', 'Leg Pain');
                  })
                }
                imageSource={require('../Resources/legPain.png')}
                backgroundColor={'#7c0920'}
                color={'#ffffff'}
              />
              <ButtonWithImage
                text={'Random User'}
                onPress={() => this._addNewItem('random-user', '')}
                imageSource={require('../Resources/profilePic.png')}
                backgroundColor={'#b43649'}
                color={'#ffffff'}
              />
            </ScrollView>
          </View>
        </Modal>

        <View style={styles.addButton}>
          <ButtonWithImage
            imageSource={require('../Resources/homeIcon.png')}
            width={50}
            height={50}
            backgroundColor={'#ccffff'}
          />
          <ButtonWithImage
            imageSource={require('../Resources/calendar.png')}
            width={50}
            height={50}
            backgroundColor={'#ccccff'}
          />
          <GestureRecognizer
            onSwipeUp={() => this.setState({ buttonsVisible: true })}
          >
            <ButtonWithImage
              imageSource={require('../Resources/plusSign.png')}
              width={50}
              height={50}
              backgroundColor={'#cc66ff'}
              onPress={() => {
                this.setState({
                  menuVisible: true
                });
              }}
              onLongPress={() => {
                this.setState({
                  buttonsVisible: true
                });
              }}
            />
          </GestureRecognizer>
          <ButtonWithImage
            imageSource={require('../Resources/pillBottle.png')}
            width={50}
            height={50}
            backgroundColor={'#ff9999'}
          />
          <ButtonWithImage
            imageSource={require('../Resources/settings.png')}
            width={50}
            height={50}
            backgroundColor={'#cccccc'}
          />
        </View>
      </View>
    );
  }
}

export default FlatListCard;
