{"version":3,"sources":["resources/back_shape.png","resources/apple.png","resources/Privacy.pdf","resources/Terms.pdf","resources/iphone_header_crop.png","components/Headline/Headline.js","components/Iphone/Iphone.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Headline","react_default","a","createElement","src","bg","alt","id","className","href","onClick","console","log","apple","Pdf","target","PdfTwo","Iphone","iphone_header","App","components_Headline_Headline","components_Iphone_Iphone","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oTCwCzBC,EAjCE,WACb,OACIC,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAIC,IAAI,mBAAmBC,GAAG,OACxCN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cACXP,EAAAC,EAAAC,cAAA,KAAGK,UAAU,eACTP,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,QAAMK,UAAU,cAAhB,UAApB,QACAP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAAA,KAAGK,UAAU,aACTP,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yDACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,4DAGRF,EAAAC,EAAAC,cAAA,KAAGM,KAAK,wCACRR,EAAAC,EAAAC,cAAA,OAAKO,QAAS,WAAOC,QAAQC,IAAI,UAAUR,IAAKS,IAAOP,IAAI,QAAQC,GAAG,WAEtEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACXP,EAAAC,EAAAC,cAAA,KAAGM,KAAMK,IAAKC,OAAO,UACrBd,EAAAC,EAAAC,cAAA,QAAMK,UAAU,eAAhB,mBAEAP,EAAAC,EAAAC,cAAA,KAAGM,KAAMO,IAAQD,OAAO,UACxBd,EAAAC,EAAAC,cAAA,QAAMK,UAAU,eAAhB,4CClBDS,EAVA,WACX,OACIhB,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cACfP,EAAAC,EAAAC,cAAA,OAAKC,IAAKc,IAAeZ,IAAI,gBAAgBC,GAAG,2BCK7CY,MATf,WACE,OACElB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.96a4084b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back_shape.6a90c8da.png\";","module.exports = __webpack_public_path__ + \"static/media/apple.f337c20f.png\";","module.exports = __webpack_public_path__ + \"static/media/Privacy.2aa9c492.pdf\";","module.exports = __webpack_public_path__ + \"static/media/Terms.fd374d58.pdf\";","module.exports = __webpack_public_path__ + \"static/media/iphone_header_crop.6db2387a.png\";","import React from 'react';\r\n\r\nimport './Headline.css'\r\nimport bg from '../../resources/back_shape.png';\r\nimport apple from '../../resources/apple.png';\r\nimport Pdf from '../../resources/Privacy.pdf';\r\nimport PdfTwo from '../../resources/Terms.pdf';\r\nconst Headline = () => {\r\n    return (\r\n        <section>\r\n            <img src={bg} alt='Background Shape' id='bg'/>\r\n            <div className=\"header-box\">\r\n                <p className=\"header-text\">\r\n                    <span>Managing your <span className=\"color-text\">health</span> has</span>\r\n                    <br/>\r\n                    <span>never been so easy</span>\r\n                </p>\r\n                <p className=\"body-text\">\r\n                    <span>ReX is the health tracker that gives</span>\r\n                    <br/>\r\n                    <span>you complete control over everything from</span>\r\n                    <br/>\r\n                    <span>tracking prescriptions to logging symptoms</span>\r\n                </p>\r\n            </div>\r\n            <a href=\"https://www.apple.com/ios/app-store/\">\r\n            <img onClick={() => {console.log(\"hello\")}}src={apple} alt=\"Apple\" id='apple' />\r\n            </a>\r\n            <div className=\"menu\">\r\n                <a href={Pdf} target=\"_blank\">\r\n                <span className=\"menu-button\">Privacy Policy</span>\r\n                </a>\r\n                <a href={PdfTwo} target=\"_blank\">\r\n                <span className=\"menu-button\">Terms of Use</span>\r\n                </a>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Headline","import React from 'react';\r\n\r\nimport './Iphone.css'\r\nimport iphone_header from '../../resources/iphone_header_crop.png';\r\n\r\nconst Iphone = () => {\r\n    return (\r\n        <section>\r\n            <div className=\"iphone-box\">\r\n            <img src={iphone_header} alt='iphone_header' id='iphone_header' />\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Iphone","import React from 'react';\nimport Headline from './components/Headline/Headline.js';\nimport Iphone from './components/Iphone/Iphone.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main>\n      <Headline />\n      <Iphone />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}